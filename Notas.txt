


**********Limpiar pantalla***************
windows

from os import system
system("clear")

**************Introduccion a Python******************

¿Qué es Python?
Python es un lenguaje de programación creado por Guido Van Rossum, con una sintaxis muy limpia, ideado para enseñar a la gente a programar bien. Se trata de un lenguaje interpretado o de script.

Ventajas:
Legible: sintaxis intuitiva y estricta.
Productivo: ahorra mucho código.
Portable: para todo sistema operativo.
Recargado: viene con muchas librerías por defecto.
Editor recomendado: Atom o Sublime Text.

Instalación
Existen dos versiones de Python que tienen gran uso actualmente, Python 2.x y Python 3.x, para este curso puedes utilizar cualquiera de las dos, pero te recomendamos usar una versión 2.x

Para instalar Python solo debes seguir los pasos dependiendo del sistema operativo que tengas instalado.

Windows
Para instalarlo en Windows, debemos ir a https://www.python.org/downloads/release/python-2716/ el sitio reconocerá el sistema operativo y te dará las opciones para descargar.

Ejecuta el archivo que descargaste y sigue los pasos de instalación. Al finalizar vas a poder utilizar Python en tu computador y estás listo para continuar con el curso.

MacOS
La forma sencilla es tener instalado homebrew y usar el comando:

Para instalar la Versión 2.7

brew install python
Para instalar la Versión 3.x

brew install python3
Linux
Generalmente Linux ya lo trae instalado, para comprobarlo puedes ejecutar en la terminal el comando

Versión 2.7

python -v
Versión 3.x

python3 -v
Si el comando arroja un error quiere decir que no lo tienes instalado, en ese caso los pasos para instalarlo cambian un poco de acuerdo con la distribución de linux que estés usando. Generalmente el gestor de paquetes de la distribución de Linux tiene el paquete de Python

Si eres usuario de Ubuntu o Debian por ejemplo puedes usar este comando para instalar la versión 3.1:

$ sudo apt-get install python3.1

Si eres usuario de Red Hat o Centos por ejemplo puedes usar este comando para instalar python

$ sudo yum install python

Si usas otra distribución o no has podido instalar python en tu sistema Linux dejame un comentario y vemos tu caso específico.

Si eres usuario habitual de linux también puedes descargar los archivos para instalarlo manualmente.

Antes de empezar:
Para usar Python debemos tener un editor de texto abierto y una terminal o cmd (línea de comandos en Windows) como administrador.

No le tengas miedo a la consola, la consola es tu amiga.

Para ejecutar Python abres la terminal y escribes:

 $ python

Te abrirá una consola de Python, lo notarás porque el prompt cambia y ahora te muestra tres simbolos de mayor que “ >>> “ y el puntero adelante indicando que puedes empezar a ingresar comandos de python.

 >>> 
En éste modo puedes usar todos los comandos de Python o escribir código directamente.

*Si deseas ejecutar código de un archivo sólo debes guardarlo con extension.py y luego ejecutar en la terminal:

 $ python archivo.py
Ten en cuenta que para ejecutar el archivo con extensión “.py” debes estar ubicado en el directorio donde tienes guardado el archivo.

Cuando usamos Python debemos atender ciertas reglas de la comunidad para definir su estructura. Las encuentras en el libro PEP8.

Tipos de datos en Python
Enteros (int): en este grupo están todos los números, enteros y long:
ejemplo: 1, 2, 3, 2121, 2192, -123

Booleanos (bool): Son los valores falso o verdadero, compatibles con todas las operaciones booleanas ( and, not, or ):
ejemplo: True, False

Cadenas (str): Son una cadena de texto :
ejemplos: “Hola”, “¿Cómo estas?”

Listas: Son un grupo o array de datos, puede contener cualquiera de los datos anteriores:
ejemplos: [1,2,3, ”hola” , [1,2,3] ], [1,“Hola”,True ]

Diccionarios: Son un grupo de datos que se acceden a partir de una clave:
ejemplo: {“clave”:”valor”}, {“nombre”:”Fernando”}

Tuplas: también son un grupo de datos igual que una lista con la diferencia que una tupla después de creada no se puede modificar.
ejemplos: (1,2,3, ”hola” , (1,2,3) ), (1,“Hola”,True) (Pero jamás podremos cambiar los elementos dentro de esa Tupla)

En Python trabajas con módulos y ficheros que usas para importar las librerías.

Funciones
Las funciones las defines con def junto a un nombre y unos paréntesis que reciben los parámetros a usar. Terminas con dos puntos.

def nombre_de_la_función(parametros):

Después por indentación colocas los datos que se ejecutarán desde la función:

 >>> def my_first_function():
 ...	return “Hello World!” 
 ...    
 >>> my_first_function()
Hello World!

Variables
Las variables, a diferencia de los demás lenguajes de programación, no debes definirlas, ni tampoco su tipo de dato, ya que al momento de iterarlas se identificará su tipo. Recuerda que en Python todo es un objeto.

 A = 3 
 B = A
Listas
Las listas las declaras con corchetes. Estas pueden tener una lista dentro o cualquier tipo de dato.

 >>> L = [22, True, ”una lista”, [1, 2]] 
 >>> L[0] 
 22
Tuplas
Las tuplas se declaran con paréntesis, recuerda que no puedes editar los datos de una tupla después de que la has creado.

 >>> T = (22, True, "una tupla", (1, 2)) 
 >>> T[0] 
 22
Diccionarios
En los diccionarios tienes un grupo de datos con un formato: la primera cadena o número será la clave para acceder al segundo dato, el segundo dato será el dato al cual accederás con la llave. Recuerda que los diccionarios son listas de llave:valor.

 >>> D = {"Kill Bill": "Tamarino", "Amelie": "Jean-Pierre Jeunet"} 
 >>> D["Kill Bill"]
 "Tamarino"
Conversiones
De flotante a entero:

 >>> int(4.3)
 4
De entero a flotante:

 >>> float(4) 
 4.0
De entero a string:

 >>> str(4.3) 
 "4.3"
De tupla a lista:

 >>> list((4, 5, 2)) 
 [4, 5, 2]
Operadores Comunes
Longitud de una cadena, lista, tupla, etc.:

 >>> len("key") 
 3
Tipo de dato:

 >>> type(4) 
 < type int >
Aplicar una conversión a un conjunto como una lista:

 >>> map(str, [1, 2, 3, 4])
 ['1', '2', '3', '4']
Redondear un flotante con x número de decimales:

>>> round(6.3243, 1)
 6.3
Generar un rango en una lista (esto es mágico):

 >>> range(5) 
 [0, 1, 2, 3, 4]
Sumar un conjunto:

 >>> sum([1, 2, 4]) 
 7
Organizar un conjunto:

 >>> sorted([5, 2, 1]) 
 [1, 2, 5]
Conocer los comandos que le puedes aplicar a x tipo de datos:

 >>>Li = [5, 2, 1]
 >>>dir(Li)
 >>>['append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
 
‘append’, ‘count’, ‘extend’, ‘index’, ‘insert’, ‘pop’, ‘remove’, ‘reverse’, ‘sort’ son posibles comandos que puedes aplicar a una lista.

Información sobre una función o librería:

 >>> help(sorted) 
 (Aparecerá la documentación de la función sorted)
Clases
Clases es uno de los conceptos con más definiciones en la programación, pero en resumen sólo son la representación de un objeto. Para definir la clase usas class y el nombre. En caso de tener parámetros los pones entre paréntesis.

Para crear un constructor haces una función dentro de la clase con el nombre init y de parámetros self (significa su clase misma), nombre_r y edad_r:

 >>> class Estudiante(object): 
 ... 	def __init__(self,nombre_r,edad_r): 
 ... 		self.nombre = nombre_r 
 ... 		self.edad = edad_r 
 ...
 ... 	def hola(self): 
 ... 		return "Mi nombre es %s y tengo %i" % (self.nombre, self.edad) 
 ... 
 >>> e = Estudiante(“Arturo”, 21) 
 >>> print e.hola() 
 Mi nombre es Arturo y tengo 21
Lo que hicimos en las dos últimas líneas fue:

1. En la variable e llamamos la clase Estudiante y le pasamos la cadena “Arturo” y el entero 21.

2. Imprimimos la función hola() dentro de la variable e (a la que anteriormente habíamos pasado la clase).

Y por eso se imprime la cadena “Mi nombre es Arturo y tengo 21”

Métodos especiales
cmp(self,otro)
Método llamado cuando utilizas los operadores de comparación para comprobar si tu objeto es menor, mayor o igual al objeto pasado como parámetro.

len(self)
Método llamado para comprobar la longitud del objeto. Lo usas, por ejemplo, cuando llamas la función len(obj) sobre nuestro código. Como es de suponer el método te debe devolver la longitud del objeto.

init(self,otro)
Es un constructor de nuestra clase, es decir, es un “método especial” que llamas automáticamente cuando creas un objeto.

Condicionales IF
Los condicionales tienen la siguiente estructura. Ten en cuenta que lo que contiene los paréntesis es la comparación que debe cumplir para que los elementos se cumplan.

 if ( a > b ):
 	elementos 
 elif ( a == b ): 
 	elementos 
 else:
 	elementos
Bucle FOR
El bucle de for lo puedes usar de la siguiente forma: recorres una cadena o lista a la cual va a tomar el elemento en cuestión con la siguiente estructura:

 for i in ____:
 	elementos
Ejemplo:

 for i in range(10):
 	print i
En este caso recorrerá una lista de diez elementos, es decir el _print i _de ejecutar diez veces. Ahora i va a tomar cada valor de la lista, entonces este for imprimirá los números del 0 al 9 (recordar que en un range vas hasta el número puesto -1).

Bucle WHILE
En este caso while tiene una condición que determina hasta cuándo se ejecutará. O sea que dejará de ejecutarse en el momento en que la condición deje de ser cierta. La estructura de un while es la siguiente:

 while (condición):
 	elementos
Ejemplo:

 >>> x = 0 
 >>> while x < 10: 
 ... 	print x 
 ... 	x += 1
En este ejemplo preguntará si es menor que diez. Dado que es menor imprimirá x y luego sumará una unidad a x. Luego x es 1 y como sigue siendo menor a diez se seguirá ejecutando, y así sucesivamente hasta que x llegue a ser mayor o igual a 10.

Cómo seguir
No te preocupes si en este punto no entiendes algunos de estos conceptos, sigue con el curso donde vamos a realizar ejercicios que te ayuden a comprender y poder aplicar cada una de las características de Python.

Adelante!


**********Operadores*************
Operadores matemáticos en Python
Los operadores nos permiten trabajar con valores y generar nuevos valores por medio de estas operaciones.

Existen muchos operadores básicos,

(+) Suma

(-) Resta

(asterisco) Multiplicación

(/) División

(//) División de enteros

(%) Operador de módulo

(doble asterisco) Potencias

(>) Mayor que

(<) Menor que

(==) Igual

(>=) Mayor igual

(<=) Menor igual


***********Tipos de datps Python*********

Operadores matemáticos en Python
Los operadores nos permiten trabajar con valores y generar nuevos valores por medio de estas operaciones.

Existen muchos operadores básicos,

(+) Suma

(-) Resta

(asterisco) Multiplicación

(/) División

(//) División de enteros

(%) Operador de módulo

(doble asterisco) Potencias

(>) Mayor que

(<) Menor que

(==) Igual

(>=) Mayor igual

(<=) Menor igual

**********Funciones ***********
Definir funciones con Python
Las funciones son un concepto fundamental en programación, una función es una secuencia de comandos que realizan un computo.
En Python las funciones se definen usando la palabra reservada def y luego el nombre de la función con paréntesis y dos puntos que indican que lo que sigue son los comandos, una función debe retornar un valor, para esto se usa la palabra reservada return.

def  suma(num1, num2):

    return num1 + num2

Para usar una función simplemente la llamamos por su nombre seguido por paréntesis con los parámetros que recibe.

suma(2,3)
Recuerda:

Si usas Python 3, debes usar la función input() para recibir datos del usuario.
Para definir dónde comenzar el código usamos la línea Screen Shot 2017-08-17 at 4.42.46 PM.png
Para definir un bloque dentro de la función debemos indentar con 4 espacios.
Las funciones nos permiten ejecutar determinado código con diferentes valore

**********Funciones con parametros**********
Funciones con parámetros
Limites al declarar funciones

Los nombres no pueden comenzar con digitos
No pueden utilizar una palabra reservada
Las variables deben tener diferentes nombres
Los nombres de las funciones deben ser descriptivas de lo que hacen las funciones
Imprimir valor de variable

Para poder imprimir el valor de una variable dentro de un string podemos hacerlo así:

'${} pasos mexicanos son ${} pesos mexicanos'.format(ammount, result)

Declarar vs Ejecutar

Declarar una función es escribir su estructura
Ejecutar una función es llamar la función y ejecutar su código

Donde se puede acceder a las variables

Scope de las variables, cada vez que una función se ejecuta se genera un contenedor donde las variables de la función van a vivir, una vez se sale de la función estas variables no van a existir.

**********Estructura de condicionales********
Uno de las cosas más poderosas en programación es controlar el flujo de ejecución, para esto utilizamos condicionales.

Las condicionales son sentencias que devuelven un valor booleano (True, False)

Podemos utilizar:

Operadores relacionales:

== Es igual
!= Es diferente
> Es mayor
>= Es mayor o igual
< Es menor
<= Es menor o igual

Operadores lógicos:

and
or
not

*********Strings***********
Un string es una secuencia de caracteres, donde cada caracter tiene un indice que inicia en cero, por ejemplo

my_string = 'platzi'

my_string[0] # p
my_string[1] # l
my_string[2] # a
my_string[3] # t
my_string[4] # z
my_string[5] # i
Para conocer la longitud de un string podemos usar la funcion len

len(my_string) # 6
Los string tienen algunos métodos útiles cómo:

my_string.upper() # retorna el string en máyusculas
my_string.lower() # retorna el string en minúscula
my_string.find('F') # retorna el índice donde se encuentra


************0Separar cadenas de texto en Python*********cadena en reversa

La función slice de python nos permite separar los strings en substrings generando nuevas secuencias.

my_string = 'platzi'

my_string[1:3] # la

my_string[1:] # latzi

my_string[1:6:2] # lti

my_string[::-1] # iztalp

**********for************
Cuando necesitamos realizar operaciones sobre una serie de datos podemos utilizar iteraciones.

Función range

La función range nos permite generar un rango a partir de un número

range(5) # [0,1,2,3,4]
range(5, 40, 3)
Iteraciones con for

for nos permite recorrer un arreglo, asignando cada valor a una variable que decidas

for i in range(5):
    print(i)
Podemos operar los valores usando también condiciones, en este caso solo queremos elevar al cuadrado, los valores que sean divisibles por 3

for i in range(30):
  if i % 3 != 0:
    continue
  else:
    print(i**2)
La palabra reservada continue permite saltar a la siguiente iteración del ciclo y break permite salirse del ciclo.

***********While loop************

Determinar si la condicion es verdadera o falsa
si la condicion es falsa la condicion se termina
si es verdadera se ejecuta el cuerpo del while loop

Se vuelve a verificar, si es verdadera regresa al paso uno
si es falsa nos salimos del while loop

 whilenot encontrado:
        numero = int(raw_input('Intenta un número：'))

        
        if numero == numero_aleatorio:
            print('Felicidades. Encontraste el número')
            encontrado = True
        elif numero > numero_aleatorio:
            print('El número es más pequeño')
            fallos +=1
        else:
            print('El número es más grande')
            fallos +=1

        if fallos == 3: 
            print('Lo siento has agotado tus opciones') 
            break   
Otra forma de hacer iteraciones es con el while loop, éste ciclo se ejecuta MIENTRAS la condición se evalúe como verdadera, el ciclo termina cuando la evaluación resulta en falso.
En este tipo de ciclo es muy importante definir la condición de parada, si no el ciclo puede ejecutarse hasta el infinito y consumir todos los recursos de la maquina.

**********Listas**************
Ya vimos que los strings son una secuencia de caracteres, cuando hablamos de listas podemos hablar de secuencias de cualquier cosa, por ejemplo listas de números, listas de strings, listas de objetos mas complejos con tipos propios etc.

Una lista es una secuencia de elementos, para crearlas usamos corchetes [] o con la función list, por ejemplo:

Las listas se pueden acceder a través de indices, éstos indices inician en cero (0)

amigos = list()
numeros = [1,2,3,4,5]
Las listas son mutables, para añadir elementos a una lista podemos utilizar el método append

Las listas se pueden acceder con indices, que inician en cero.

amigos=list()
amigos.append('Pedro')
amigos[0]
'Pedro'

amigos.append('Enrique')
amigos[1]
'Enrique'

********** Operaciones con listas  ************

Cuando trabajamos con listas podemos también hacer operaciones por ejemplo,

Unir listas

my_lista = [1]

my_lista2 = [2,3,4]

my_lista3 = my_lista + my_lista2

my_lista3 # [1,2,3,4]
Multiplicar elementos

my_lista = ['a']
my_lista2 = my_lista * 5
my_lista2 # ['a','a','a','a','a']
Dividir listas

my_lista = [1,2,3,4,5]
my_lista_reversed = my_lista[::-1]
my_lista_reversed # [5,4,3,2,1]
Eliminar último elemento de la lista

my_lista = [1,2,3,4,5]
my_lista = my_lista.pop()
my_lista # [1,2,3,4]
Ordenar la lista

my_lista = [2,1,5,4,3]
my_lista = my_lista.sort()
my_lista # [1,2,3,4,5]
Eliminar un elemento

my_lista = [1,2,3,4,5]
del my_lista[0]
my_lista # [2,3,4,5]